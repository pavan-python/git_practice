Sequence or Collections in PYTHON
---------------------------------
* The most basic data structure in Python is the sequence. 

* Each element of a sequence is assigned
a number - its position or index. 

* The first index is zero, the second index is one, and so forth.

* Strings
* Lists
* Tuples
* set
* Dictionary

Strings:
--------
* String is a sequence of characters with in either single quotes or double quotes.

* The string data type provides methods or functions to work with strings. 

* Python has several built-in functions associated with the string data type. 

String predefined function 
---------------------------
len()
upper()
lower()
isupper() returns true or false
islower() returns true or false
join()  - is used to convert list into string
split() - is used to convert string into list
replace()
count()
title() => God Is Great
swapcase() =>gOD iS gREAT
rjust()
ljust()
center()
find(2)
strip() - it remove empty spaces.

# string examples
s="Hello World"
s1="HELLO"
s2= "-";
x = 'blue,red,green'
x1="god is great"
x2="python"
x3="       python string     "
seq = ("a", "b", "c"); # This is sequence of strings.
print("Length of string=",len(s))
print ("upper case=",s.upper())
print("lower case=",s.lower())
print ("isupper=",s1.isupper())
print ("islower=",s1.islower())
print("join string=",s2.join(seq))
print ("split string=",x.split(","))
print("Replace=",s.replace("Hello","Good"))
print("Swapcase=",s.swapcase())
print("Count=",s.count('o'))
print("Title case=",x1.title())
print("rjust=",x2.rjust(10,'*'))
print("ljust=",x2.ljust(10,'*'))
print("center=",x2.center(20,'*'))
print("find=",x2.find('y'))
print("Strip=",x3.strip());


# Write a program to reverse the given string
s=input("Enter any string:")
print(s[::-1])

Note: Python sequence slice addresses can be written as a[start:end:step] and any of start, stop or end can be dropped.


# Write a program to reverse the given string

I method

s=input("Enter any string:")
l=s.split()
l.reverse()
s1=" ".join(l);
print(s1)

II method

# Write a program to reverse the given string
s=input("Enter any string")
l=s.split(" ") # string into list
l.reverse()
l.sort()
s1=" ".join(l) # list into string
print(s1)


Important functions of math modules:
-----------------------------------
sin(x)
cos(x)
tan(x)
asin(x)
acos(x)
atan(x)
pow(x,y)
ceil(x)
floor(x)
factorial(x)
round(x,y)
trunc(x)
gcd(x,y)

--examples

import math
print("Sin values=",math.sin(30))
print("Cos values=",math.cos(30))
print ("Tan values=",math.tan(30))
print ("power values=",math.pow(10,3))
print("ceil values=",math.ceil(8888.8888))
print ("Floor values=",math.floor(8888.8888))
print("Rounded values=",round(8888.8888,2))
print("Factorial values=",math.factorial(5))
print("Truncate values=",math.trunc(8888.8888))
print("gcd values=",math.gcd(10,15))


Important variables of math modules:
------------------------------------
    e = 2.718281828459045
    inf = inf
    nan = nan
    pi = 3.141592653589793
    tau = 6.283185307179586

# write a python program to find area of circle

I method

# write a python program to find area of circle

import math
r=int(input("Enter Radius values"))
print ("Area of Circle is:",math.pi * r**2)



from math import *
r=int(input("Enter Radius values"))
print ("Area of Circle is:",pi * r**2)


--How to get the all function list from math package?
import math
print(dir(math))
print(help(math))


Python Lists:
--------------
* The list is a most important datatype available in Python which can be written as a list of comma separated values items between square brackets. 

* Important thing about a list is that items in a list
need not be of the same type.

* Creating a list is as simple as putting different comma-separated values between square brackets.

For example -
list1 = ['physics', 'chemistry', 1997, 2000];

list2 = [1, 2, 3, 4, 5 ];

list3 = ["a", "b", "c", "d"];

--example

#Accessing Values in Lists

list1 = ['physics', 'chemistry', 1997, 2000];
list2 = [1, 2, 3, 4, 5, 6, 7 ];

print ("list1[0]: ", list1[0])
print ("list2[1:5]: ", list2[1:5])


# Updating Lists

list = ['physics', 'chemistry', 1997, 2000];
print ("Value available at index 2 : ")
print (list[2])
list[2] = 2001;
print ("New value available at index 2 : ")
print (list[2])


#Delete List Elements

list1 = ['physics', 'chemistry', 1997, 2000];
print (list1)
del list1[2];
print ("After deleting value at index 2 : ")
print (list1)



Basic List Operations:
-----------------------

Python Expression 			Results 		Description
=====================================================================
len [1, 2, 3] 			3 		  Length

[1, 2, 3] + [4, 5, 6] 			[1, 2, 3, 4, 5, 6] 	Concatenation

['Hi!'] * 4 				['Hi!', 'Hi!', 'Hi!', 'Hi!'] 	Repetition

3 in [1, 2, 3] 			True 		 Membership

for x in [1, 2, 3]: 
print x 				1 2 3 		 Iteration



--example2


L = ['spam ', 'Spam ', 'SPAM!']

Python Expression 	Results 	
L[2] 			'SPAM!' 	 
L[-2] 			'Spam' 
L[1:] 			['Spam', 'SPAM!'] 
L[-3]			'spam'
L[0]			'spam'

List function
---------------
len()
max()
min()
sort()
reverse()
append()
insert()
remove(value)
pop(index) => remove item 
pop() => by default last item removed


# To find the length of the list

list1, list2 = [123, 'xyz', 'zara'], [456, 'abc']

print ("First list length : ", len(list1))
print ("Second list length : ", len(list2));

# To find the max values in the list

list1, list2 = ['xya', 'xyz', 'zara', 'abc'], [456, 700, 200]

print ("Max value element : ", max(list1))
print ("Max value element : ", max(list2))

# To find the min values in the list

list1, list2 = ['xya', 'xyz', 'zara', 'abc'], [456, 700, 200]

print ("Min value element : ", min(list1))
print ("Min value element : ", min(list2))



# append list  #add the ending of list

aList = [123, 'xyz', 'zara', 'abc'];
aList.append( 2009 );
print ("Updated List : ", aList);

# example for insert method

aList = [123, 'xyz', 'zara', 'abc'];
print(aList)
aList.insert(1,2009)
print ("Updated List : ", aList);

# example for insert and remove method

aList = [123, 'xyz', 'zara', 'abc'];
print(aList)
aList.insert(1,2009)
print ("Updated List : ", aList);
aList.remove(2009)
print(aList)


--reverse list

aList = [123, 'xyz', 'zara', 'abc', 'xyz'];

aList.reverse();
print ("List : ", aList);

--sorted list

aList = ['nithish', 'xyz', 'zara', 'abc', 'xyz'];
aList.sort();
print ("List : ", aList)
aList.reverse()
print("Reverse list:",aList)




# Write a Python program to remove duplicate values from a list.

a = [10,20,30,20,10,50,60,40,80,50,40,100,20,30,40,10]
	

new = []

for x in a:
    if x not in new:
        new.append(x)
        
print(new)


II Method

a = [10,20,30,20,10,50,60,40,80,50,40]
s=set(a)
l=list(s)
l.sort()
print(l)

#  Write a Python program to clone or copy a list.

originallist = [10, 22, 44, 23, 4]
newlist = list(originallist)
print(originallist)
print(newlist)

#  Write a Python program to print a specified list after removing the 0th, 4th and 5th elements. 

# except 0 ,4,5
color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
print(color[1],color[2],color[3])
print(color[1:4])



Assignment Questions:
----------------------

1. Write a Python program to sum all the items in a list. 

2. Write a Python program to multiplies all the items in a list. 

3. Write a Python program to get the largest number from a list.

4. Write a Python program to get the smallest number from a list.

5.Write a Python program to check a list is empty or not.

6. Write a Python program to print the numbers of a specified list after removing even numbers from it. 



Tuple: (constant and immutable)
---------------------------------------------

* A tuple is a sequence of immutable Python objects. 

* Tuples are sequences, just like lists. 

* The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.


tup1 = ('physics', 'chemistry', 1997, 2000);
tup2 = (1, 2, 3, 4, 5 );
tup3 = ("a", "b", "c", "d");
tup4=  (2000,500,200,100)


Accessing the tuple values:
---------------------------

tup1 = ('physics', 'chemistry', 1997, 2000);
tup2 = (1, 2, 3, 4, 5, 6, 7 );
print ("tup1[0]: ", tup1[0])
print ("tup2[1:5]: ", tup2[1:5])


updating the Tuple values:
--------------------------


tup1 = (12, 34.56);
tup2 = ('abc', 'xyz');

tup3 = tup1 + tup2;
print (tup3);


Delete Tuple Elements:
---------------------
tup = ('physics', 'chemistry', 1997, 2000);
print (tup);
del tup;
print ("After deleting tup : ");
print (tup);


Built-in Tuple Functions:
-----------------------

Sr.No. 	Function with Description

1 	len(tuple)

	Gives the total length of the tuple.

2 	max(tuple)

	Returns item from the tuple with max value.

3 	min(tuple)

	Returns item from the tuple with min value.

4 	tuple(seq)

	Converts a list into tuple.

--example

tup = (1000,2000, 1997, 2000);
List=[100,200,300,400,500];
print (tup);
print ("Length of Tuple=",len(tup));
print("Maximum value=",max(tup));
print("Minimum value=",min(tup));
print(tuple(List))

# Write a Python program to convert a tuple to a string. 

tup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')
str =  ''.join(tup)
print(str)

Assignment:

# Write python program to convert String into tuples?
s="python"
print(tuple(s))



# Write a Python program to get the 4th element from first and 4th element from last of a tuple.

#Get an item of the tuple
tuplex = ("w", "e", "l", "c", "o", "m", "e", "s", "q", "l")
print(tuplex)
#Get item (4th element)of the tuple by index
item = tuplex[3]
print(item)
#Get item (4th element from last)by index negative
item1 = tuplex[-4]
print(item1)

II Method



# Write a Python program to get the 4th element from first and 4th element from last of a tuple.

#Get an item of the tuple
tuplex = ("w", "e", "l", "c", "o", "m", "e", "s", "q", "l")
print(tuplex)
#Get item (4th element)of the tuple by index
print(tuplex[3],tuplex[-4])



Assignment 

#Write a Python program to get the element except first and last of tuple?

#Get an item of the tuple 
tuplex = ("w", "e", "l", "c", "o", "m", "e", "s", "q", "l")
print(tuplex)




What is a set in Python?

A Set is an unordered collection of items that is iterable, mutable, and has no duplicate elements.

However, the set itself is mutable. We can add or remove items from it.

Sets can be used to perform mathematical set operations like union, intersection, symmetric difference etc.

Methods:
----------
1.union()
2.intersection()
3.add()  # add only one item
4.copy()
5.clear()
6.discard(value) or remove(value)
7.difference()
8.pop() -> remove first item
9.update() # Multiple items

--example

items = {"arrow", "spear", "arrow", "arrow", "rock"}

# Print set.
print(items)
print(len(items))

# Use in-keyword.
if "rock" in items:
    print("Rock exists")

# Use not-in keywords.
if "clock" not in items:
    print("Cloak not found")

#Example for union ()

A = {'a', 'c', 'd'}
B = {'c', 'd', 2 }
C=  {1, 2, 3}

print('A U B =', A.union(B))
print('B U C =', B.union(C))

print('A U B U C =', A.union(B, C))

print('A.union() = ', A.union())

# union all example

A = {2, 3, 5, 4}
B = {2, 5, 100}
C = {2, 3, 8, 9, 10}
l=[]
l=list(A)+list(B)+list(C)
print(l)



# Example for Intersection()

A = {2, 3, 5, 4}
B = {2, 5, 100}
C = {2, 3, 8, 9, 10}

print(B.intersection(A))
print(B.intersection(C))
print(A.intersection(C))
print(C.intersection(A, B))


# Write a Python program to create a new empty set and copy the values.

setp = set(["Red", "Green","Blue"])
setq = setp.copy()
print(setp)
print(setq)


# Write a Python program to iteration over sets. 
#Create a set 
num_set = {0, 1, 2, 3, 4, 5}
for n in num_set:
  print(n)


# Write a Python program to add member(s) in a set.
#A new empty set
color_set = set()
color_set.add("Red") # only one item
print(color_set)
#Add multiple items
color_set.update({"Blue", "Green","Yellow"})
print(color_set)



#Write a Python program to remove item(s) from set
num_set = set([0, 1, 3, 4, 5])
num_set.pop() # remove first item
print(num_set)
num_set.pop()
print(num_set)



# Write a Python program to remove an item from a set if it is present in the set.
#Create a new set
num_set = set([0, 1, 2, 3, 4, 5])
#Discard number 4
num_set.discard(4)
print(num_set)


# Write a Python program to remove an item from a set if it is present in the set.
#Create a new set
num_set = set([0, 1, 2, 3, 4, 5,6,7,8,9,10,11,12,13,14,15])
x=int(input("Enter starting values:"))
y=int(input("Enter end values:"))

while x <=y:
    num_set.discard(x)
    x=x+1
print(num_set)


# Example for difference method

A = {2, 3, 5, 4}
B = {2, 5, 100}
print(A.difference(B))
print(B.difference(A))
